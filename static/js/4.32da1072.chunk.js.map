{"version":3,"sources":["features/movies/redux/selectors/selectImageConfiguration.ts","features/movies/redux/selectors/selectMovies.ts","features/movies/redux/selectors/selectLoadingStatus.ts","features/movies/api/index.ts","features/movies/utils.ts","features/movies/constants.ts","features/movies/components/MoviesList.tsx","features/movies/redux/async-actions/getPopularMoviesAsync.ts","features/movies/redux/async-actions/getSearchMoviesAsync.ts","features/pages/Home.tsx"],"names":["selectImageConfiguration","state","moviesStore","imageConfiguration","selectMovies","movies","selectLoadingStatus","loadingStatus","makeAuthenticatedGetRequest","endpoint","params","url","baseUrl","URL","Object","keys","forEach","key","searchParams","append","toString","buildUrlWithParams","api_key","process","fetch","then","res","json","fetchConfiguration","fetchPopularMovies","page","fetchSearchMovies","query","fetchMovieDetails","id","MoviesList","imageSize","history","useHistory","dispatch","useDispatch","useSelector","imageSecureBaseUrl","useState","setQuery","useEffect","a","setLoadingStatus","images","base_url","secure_base_url","setImageConfiguration","imageBaseUrl","results","setMovies","console","error","debounceQuery","useCallback","debounce","value","getSearchMoviesAsync","onSearchChange","items","map","poster_path","title","imageSource","placeholder","onChange","onCardClick","push","Home"],"mappings":"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","file":"static/js/4.32da1072.chunk.js","sourcesContent":["import { RootState } from '../../../../store';\nimport { ImageConfiguration } from '../../types/ImageConfiguration';\n\n/**\n * Selector to extract image configuration in moviesStore.\n */\nexport const selectImageConfiguration = (state: RootState): ImageConfiguration =>\n  state.moviesStore.imageConfiguration;\n","import { RootState } from '../../../../store';\nimport { Movie } from '../../types/Movie';\n\n/**\n * Selector to extract movies array in moviesStore.\n */\nexport const selectMovies = (state: RootState): Movie[] => state.moviesStore.movies;\n","import { RootState } from '../../../../store';\nimport { LoadingStatus } from '../../types';\n\n/**\n * Selector to extract loadingStatus in moviesStore.\n */\nexport const selectLoadingStatus = (state: RootState): LoadingStatus =>\n  state.moviesStore.loadingStatus;\n","import { TMDB_API_BASE_URL, TMDB_API_KEY } from '../constants';\nimport { ConfigurationResponse, ApiResponse, MovieInformations } from '../types';\nimport { buildUrlWithParams } from '../utils';\n\n/**\n * Basic GET method to fetch endpoint from TMDB API.\n *\n * @param {string} endpoint\n * @param {Record<string, string>} [params]\n * @returns {Promise<Response>}\n */\nconst makeAuthenticatedGetRequest = <T>(\n  endpoint: string,\n  params?: Record<string, string>,\n): Promise<T> => {\n  const url = buildUrlWithParams({\n    baseUrl: `${TMDB_API_BASE_URL}${endpoint}`,\n    params: { api_key: TMDB_API_KEY, ...params },\n  });\n\n  return fetch(url).then((res: Response) => res.json());\n};\n\n/**\n * Get the system wide configuration information.\n * https://developers.themoviedb.org/3/configuration/get-api-configuration\n *\n * @returns {Promise<ApiConfiguration>}\n */\nexport const fetchConfiguration = (): Promise<ConfigurationResponse> =>\n  makeAuthenticatedGetRequest<ConfigurationResponse>('configuration');\n\n/**\n * Get a list of the current popular movies on TMDb. This list updates daily.\n * https://developers.themoviedb.org/3/movies/get-popular-movies\n *\n * @param {string} [page=\"1\"]\n * @returns {Promise<ApiResponse>} Response\n */\nexport const fetchPopularMovies = (page = '1'): Promise<ApiResponse> =>\n  makeAuthenticatedGetRequest<ApiResponse>('movie/popular', { page });\n\n/**\n * Search for movies.\n * https://developers.themoviedb.org/3/search/search-movies\n *\n * @param {string} query\n * @returns {Promise<ApiResponse>} Response\n */\nexport const fetchSearchMovies = (query: string): Promise<ApiResponse> =>\n  makeAuthenticatedGetRequest<ApiResponse>('search/movie', {\n    query,\n  });\n\n/**\n * Get the primary information about a movie.\n * https://developers.themoviedb.org/3/movies/get-movie-details\n *\n * @param {number} id\n * @returns {Promise<MovieInformations>}\n */\nexport const fetchMovieDetails = (id: number): Promise<MovieInformations> =>\n  makeAuthenticatedGetRequest<MovieInformations>(`movie/${id}`);\n","/**\n * Build an URL with parameters passed as arguments.\n *\n * @param {{\n *   baseUrl: string;\n *   params: Record<string, string>;\n * }} {\n *   baseUrl,\n *   params,\n * }\n * @returns {string} Full URL with parameters.\n */\nexport const buildUrlWithParams = ({\n  baseUrl,\n  params,\n}: {\n  baseUrl: string;\n  params: Record<string, string>;\n}): string => {\n  const url = new URL(baseUrl);\n\n  Object.keys(params).forEach((key: string) => url.searchParams.append(key, params[key]));\n\n  return url.toString();\n};\n","/** The Movie Database API base URL. */\nexport const TMDB_API_BASE_URL = 'https://api.themoviedb.org/3/';\n\n/** API key used to request TMDB API. */\nexport const TMDB_API_KEY = process.env.REACT_APP_TMDB_API_TOKEN || '';\n","import React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport debounce from 'lodash.debounce';\nimport { CardList, CardListItem, SearchBar } from '@test-project/ui';\n\nimport { useHistory } from 'react-router-dom';\nimport { PosterSizes } from '../types/PosterSizes';\n\nimport { getPopularMoviesAsync } from '../redux/async-actions/getPopularMoviesAsync';\nimport { getSearchMoviesAsync } from '../redux/async-actions/getSearchMoviesAsync';\n\nimport { selectMovies } from '../redux/selectors/selectMovies';\nimport { selectLoadingStatus } from '../redux/selectors/selectLoadingStatus';\nimport { selectImageConfiguration } from '../redux/selectors/selectImageConfiguration';\n\n/**\n * Debounce time for the search bar.\n */\nconst DEBOUNCE_TIME = 500;\n\n/**\n * The placeholder of the search bar.\n */\nconst SEARCHBAR_PLACEHOLDER = 'Rechercher un film';\n\ninterface MoviesListProps {\n  /**\n   * Size of the movie's poster.\n   */\n  imageSize?: PosterSizes;\n}\n\n/**\n * Displays a list of popular movies and a search bar to fetch movies.\n */\nconst MoviesList: FC<MoviesListProps> = ({ imageSize = 'w500' }) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const movies = useSelector(selectMovies);\n  const loadingStatus = useSelector(selectLoadingStatus);\n  const { imageSecureBaseUrl } = useSelector(selectImageConfiguration);\n\n  const [query, setQuery] = useState<string>();\n\n  useEffect(() => {\n    if (!query) {\n      dispatch(getPopularMoviesAsync());\n    }\n  }, [dispatch, query]);\n\n  /**\n   * Debounce the call to search movies to prevent spam and offer a better user experience.\n   */\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounceQuery = useCallback(\n    debounce((value: string) => {\n      if (value) {\n        dispatch(getSearchMoviesAsync(value));\n      }\n    }, DEBOUNCE_TIME),\n    [dispatch],\n  );\n\n  /**\n   * Handles the changes value of the search bar to fetch movies.\n   *\n   * @param value Search query.\n   */\n  const onSearchChange = useCallback(\n    (value: string) => {\n      setQuery(value);\n      debounceQuery(value);\n    },\n    [debounceQuery],\n  );\n\n  /**\n   * Handles click on a movie card to redirect to movie details.\n   *\n   * @param id Movie id.\n   */\n  const onCardClick = (id?: number) => {\n    if (id) {\n      history.push(`/movie/${id}`);\n    }\n  };\n\n  // eslint-disable-next-line camelcase\n  const items: CardListItem[] = movies.map(({ id, poster_path, title }) => ({\n    id,\n    // eslint-disable-next-line camelcase\n    imageSource: `${imageSecureBaseUrl}${imageSize}${poster_path}`,\n    title,\n  }));\n\n  return (\n    <>\n      <SearchBar placeholder={SEARCHBAR_PLACEHOLDER} onChange={onSearchChange} />\n      {loadingStatus === 'idle' && <CardList items={items} onCardClick={onCardClick} />}\n    </>\n  );\n};\n\nexport default MoviesList;\n","import { AppThunk } from '../../../../store';\nimport { fetchConfiguration, fetchPopularMovies } from '../../api';\nimport { setImageConfiguration, setLoadingStatus, setMovies } from '../slice';\n\n/**\n * Fetch and store popular movies in the store.\n */\nexport const getPopularMoviesAsync = (page?: string): AppThunk => async (dispatch) => {\n  dispatch(setLoadingStatus('pending'));\n\n  try {\n    const { images } = await fetchConfiguration();\n    // eslint-disable-next-line camelcase\n    const { base_url, secure_base_url } = images;\n\n    dispatch(\n      setImageConfiguration({\n        imageBaseUrl: base_url,\n        imageSecureBaseUrl: secure_base_url,\n      }),\n    );\n\n    const { results } = await fetchPopularMovies(page);\n\n    dispatch(setMovies(results));\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n  } finally {\n    dispatch(setLoadingStatus('idle'));\n  }\n};\n","import { AppThunk } from '../../../../store';\nimport { fetchConfiguration, fetchSearchMovies } from '../../api';\nimport { setImageConfiguration, setLoadingStatus, setMovies } from '../slice';\n\n/**\n * Fetch and store searched movies in the store.\n */\nexport const getSearchMoviesAsync = (query: string): AppThunk => async (dispatch) => {\n  dispatch(setLoadingStatus('pending'));\n\n  try {\n    const { images } = await fetchConfiguration();\n    // eslint-disable-next-line camelcase\n    const { base_url, secure_base_url } = images;\n\n    dispatch(\n      setImageConfiguration({\n        imageBaseUrl: base_url,\n        imageSecureBaseUrl: secure_base_url,\n      }),\n    );\n\n    const { results } = await fetchSearchMovies(query);\n\n    dispatch(setMovies(results));\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n  } finally {\n    dispatch(setLoadingStatus('idle'));\n  }\n};\n","import React, { FC } from 'react';\n\nimport MoviesList from '../movies/components/MoviesList';\n\nconst Home: FC = () => {\n  return <MoviesList />;\n};\n\nexport default Home;\n"],"sourceRoot":""}